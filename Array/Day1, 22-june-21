// Que01 - Reverse array with different datatypes
#include <iostream>
 
template<typename T, int n>
void print_array(T const(& arr)[n])
{
    for (int i = n - 1; i >= 0; i--) {
        std::cout << arr[i] << ' ';
    }
}
 
// Print contents of an array in C++ using templates
int main()
{
    char arr[] = { "hello"};
    int arr1[] = {1,2,3,4,5};
 
    print_array(arr);
    std::cout<<"\n";
    print_array(arr1);
 
    return 0;
}
//-------X-----------X----------X

//Que02 -  Find maximum and minimum in an array
#include <iostream>
#include <climits>
using namespace std;
 
// Optimized solution to find the minimum and maximum number in an array
void findMinAndMax(int arr[], int n, int &min, int &max)
{
    // initialize minimum element by `INFINITY` and the maximum element
    // by `-INFINITY`
    max = INT_MIN, min = INT_MAX;
 
    // if the array has an odd number of elements, ignore the last
    // element and consider it later
    bool odd = n & 1;
    if (odd) {
        n--;    // comparison
    }
 
    // compare elements in pairs, i.e., `arr[i]` and `arr[i+1]`
    for (int i = 0; i < n; i = i + 2)
    {
        int maximum, minimum;
 
        // find the maximum and minimum among `arr[i]`, `arr[i+1]`
 
        if (arr[i] > arr[i + 1]) {  // 1st comparison
            minimum = arr[i + 1],
            maximum = arr[i];
        }
        else {
            minimum = arr[i],
            maximum = arr[i + 1];
        }
 
        // update max
        if (maximum > max) {        // 2nd comparison
            max = maximum;
        }
 
        // update min
        if (minimum < min) {        // 3rd comparison
            min = minimum;
        }
    }
 
    // handle the last element if the array has an odd number of elements
 
    if (odd)                        // comparison
    {
        if (arr[n] > max) {         // extra comparison for an odd element
            max = arr[n];
        }
 
        if (arr[n] < min) {         // extra comparison for an odd element
            min = arr[n];
        }
    }
}
 
int main()
{
    int arr[] = { 4, 7, 5, 1, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    // to store minimum and maximum element, respectively
    int min, max;
 
    findMinAndMax(arr, n, min, max);
 
    cout << "The minimum array element is " << min << endl;
    cout << "The maximum array element is " << max;
 
    return 0;
}
//---------X---------X----------x---------

//Que 03- Find the "Kth" smallest element in an array

#include<iostream>
using namespace std;
 
int  kthsmallest(int arr[], int n, int k){
    int temp;
    for(int i=0; i<n; i++){
        for(int j=0; j<n-1-i; j++)
        if(arr[j]>arr[j+1]){
            temp = arr[j];
            arr[j] = arr[j+1];
            arr[j+1] = temp;
        }       
    }
    return arr[k];
}
 int main(){
     int n, k;
     cin>>n>>k;
     int arr[n];
     for(int i=0; i<n; i++){
         cin>>arr[i];
     }
     kthsmallest(arr, n, k);
     
 }
 //----------X-----------X----------

 //Que 04- Given array which consist only of 0,1,2. sort without using any sorting algo built in.
 #include<iostream>
 using namespace std;
 void swap(int A[], int i, int j){
     int temp;
     temp = A[i];
     A[i] = A[j];
     A[j] = temp;
 }

 //using 3way partition or Dutch national flag
 void threewaypartition(int arr[], int end){
     int start =0,  mid= 0, pivot=1;
     while(mid<=end){
         if(arr[mid]< pivot){
             swap(arr, start, mid);
             ++start, ++mid;
         }
         else if (arr[mid] > pivot){
             swap(arr, mid, end);
             --end;
         }
         else{
             ++mid;
         }
     }
 }

 int main(){
     int arr[] = {0, 1, 2, 2, 1, 0, 0, 2, 0, 1, 1, 0 };
     int n= sizeof(arr)/ sizeof(arr[0]);
     threewaypartition(arr, n-1); 
     for(int i=0; i<n; i++){
         cout<<arr[i];
     }  
 }

 //Que 05- Move all the negative elements to one side of array
 #include<iostream>
 using namespace std;
 void swap(int A[], int i, int j){
     int temp = A[i];
     A[i] = A[j];
     A[j] = temp;
 }
 void negative(int arr[], int n){
     int j=0;
     for(int i=0; i<n; i++){
         if(arr[i] <0){
             if(i !=j){
                 swap(arr[i], arr[j]);
             }
             j++;
         }
     }
 }
 int main(){
     int arr[]= {-1, 4, 3, -9, 2, -2};
     int n= sizeof(arr) / sizeof(arr[0]);
     negative(arr, n);
     for(int i=0; i<n; i++){
         cout<<arr[i];
     }
 }

 //Target complete :)
