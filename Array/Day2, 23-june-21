//Que 01- Find the union and intersection of two sorted array
#include<iostream>
using namespace std;
void intersection(int arr1[], int m, int arr2[], int n){
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            if(arr1[i]== arr2[j]){
                cout<< arr1[i]<<endl;
            }
        }
    }
}

void Union(int arr1[], int m, int arr2[], int n){
     int  i=0, j=0;
          while(i<m && j<n){
               if(arr1[i]<arr2[j]){
                   cout<< arr1[i++];
               }
               else if(arr1[i] > arr2[j] ){
                   cout<<arr2[j++];
               }
               else{
                   cout<<arr2[j++];
                   i++;
               }
          }
          while(i<m){
              cout<<arr1[i++]<<" ";
          }
          while(j<n){
              cout<<arr2[j++]<<" ";
          }
    
}
int main(){
    int arr1[] = {1,2,3,4,5};
    int arr2[] = {3,4,5,6,7};
    int m = sizeof(arr1)/sizeof(arr1[0]);
    int n = sizeof(arr2)/ sizeof(arr2[0]);
    intersection(arr1, m, arr2, n);
    Union(arr1, m, arr2, n);
     return 0;

}
//--------X----------X----------X-------

// Que 02- write a program to cyclic rotate an array by one
#include<iostream>
using namespace std;
void cyclicrotate(int arr[], int n){
         int x= arr[0];
         
         for(int i=0; i<n-1; i++){
             arr[i] = arr[i+1];
         }
         arr[n-1] =x;
         
}

void print_array(int arr[], int n){
    for(int i=0; i<n; i++){
        cout<<arr[i];
    }
}
int main(){
    int arr[] = {1, 2,3,4,5};
    int n= sizeof(arr)/sizeof(arr[0]);
    cyclicrotate(arr, n);
    print_array(arr, n);
}
//------X-----X--------X--------X---------

//Que 03- find largest sum contigous subarray.
#include<iostream>
using namespace std;

//using Kadane's algo which does not handle negative value
int maxsum_subarray(int arr[], int n){
    int max_ending = INT16_MIN, max_so_far = 0;
    for(int i=0; i<n; i++){
        max_ending = max_ending+ arr[i];
        if(max_so_far < max_ending){
            max_so_far = max_ending;
        }
        if(max_ending <0){
            max_ending =0;
        }
        
    }
    return max_so_far;
}
// using dynamic programming which handles negative value also
int maxSubArraySum(int a[], int size)
{
   int max_so_far = a[0];
   int curr_max = a[0];
 
   for (int i = 1; i < size; i++)
   {
        curr_max = max(a[i], curr_max+a[i]);
        max_so_far = max(max_so_far, curr_max);
   }
   return max_so_far;
}
int main(){
    int arr[] = {-1, -2, -3, -4, 5};
    int n = sizeof(arr)/sizeof(arr[0]);
   cout<< maxsum_subarray(arr, n)<<"\n";
   cout<<maxSubArraySum(arr, n);
}
//-------X--------X------X---------

//Que 04 - Minimize the maximum difference between heights
#include<iostream>
#include<algorithm>
using namespace std;

int  Mindiff(int arr[], int n, int k){
    if (n == 1)
        return 0;
    sort(arr, arr+n);
    int diff = arr[n-1] - arr[0];
    int minimum = arr[0] + k;
    int maximum = arr[n-1] - k;
    int temp = 0;
    if (minimum > maximum)
    {
        temp = minimum;
        minimum = maximum;
        maximum = temp;
    }
    for (int i = 1; i < n-1; i ++)
    {
        int difference = arr[i] - k;
        int sum = arr[i] + k;
        if (difference >= minimum || sum <= maximum)
            continue;
        if (maximum - difference <= sum - minimum)
            minimum = difference;
        else
            maximum = sum;
    }
    return min(diff, maximum - minimum);

}
int main(){
    int arr[] = {1,5,8,10};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k =2;
    cout<< Mindiff(arr, n, k);
    
}
//-------X----------X----------X---------


//Que 05- Minimum no of jumps to reach end of array
#include<iostream>
#include<algorithm>
using namespace std;

//using Greedy Approach
int minjumps(int arr[], int n){
    int previous = 0;
    int current = 0 ;
    int jumps = 0;
    for(int i = 0 ; i < n; i++) {
        if(i > previous) {
            jumps = jumps + 1;
            previous = current;
        }
        current = max(current, i + arr[i]);
    }
    return jumps;

}
int main(){
    int arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    int n= 11;
    cout<< minjumps(arr, n);
}
//-----X------X-----X-----

//Target complete:)
