//Que 01- Find duplicates in an array of N+1 integers
#include<iostream>
using namespace std;

//Using optimal solution with time complexity o(n), space complexity 0(1)
void optimal_duplicate(int arr[], int n){
    for(int i=0; i<n; i++){
        arr[arr[i]%n] = arr[arr[i]%n] +n;
    }
    for(int i=0; i<n; i++){
        if(arr[i]/n > 1){
            cout<<i;
        }
    }
}
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    //cout<< duplicates(arr, n)<<"\n";
    optimal_duplicate(arr, n);
}
//------X-------X------X------

//Que 02- Merge two sorted array withot using extra space
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

/* Algorithm used:
1) Initialize i,j,k as 0,0,n-1 where n is size of arr1 
2) Iterate through every element of arr1 and arr2 using two pointers i and j respectively
    if arr1[i] is less than arr2[j]
        increment i
    else
        swap the arr2[j] and arr1[k]
        increment j and decrement k

3) Sort both arr1 and arr2
*/

void merge(int arr1[], int m, int arr2[], int n){
    int i=0, j=0, k=m-1;
    while(i<m && j<n){
        if(arr1[i] < arr2[j])
        {
            i++;
        }
        else{
            swap(arr2[j++], arr1[k--]);
            
        }
        sort(arr1, arr1+m);
        sort(arr2, arr2+n);
    }
}
int main(){
    int arr1[] = {1, 2, 8, 9, 12,13};
    int arr2[] = {3,4,7,10};
    int m = sizeof(arr1)/ sizeof(arr1[0]);
    int n = sizeof(arr2)/ sizeof(arr2[0]);
    merge(arr1, m, arr2, n);
    cout << "After Merging \nFirst Array: ";
    for (int i = 0; i < m; i++)
        cout << arr1[i] << " ";
    cout << "\nSecond Array: ";
    for (int i = 0; i < n; i++)
        cout << arr2[i] << " ";
    return 0;

}
//---------X-----------X--------X---------

//Que 03- kadane's algo: Given an array arr of N integers. Find the contiguous sub-array with maximum sum.
#include<iostream>
using namespace std;
int kadane_algo(int arr[], int n){
    int max_ending= arr[0];
    int max_so_far= arr[0];
    for(int i=0; i<n; i++){
    max_ending= max_ending+arr[i];
    if(max_so_far < max_ending){
           max_so_far = max_ending;
    }
    if(max_ending<0){
        max_ending= 0;
    }
}
return max_so_far;
}
int main(){
    int arr[]= {-1,-2,- 3, -4 };
    int n = sizeof(arr)/ sizeof(arr[0]);
   cout<< kadane_algo(arr, n);

}
//---------X---------X---------X-------

//que 04- Merge Intervals
#include<iostream>
#include<algorithm>
using namespace std;
struct Interval{
    int start, end;
};

bool comparepair(Interval i1, Interval i2){
     return (i1.start <= i2.end);
}

//without creating extra array, space complaxity o(1)
void merge_intervals(Interval arr[], int n){
        sort(arr, arr+n, comparepair);         //sort intervals increasing order based on their starting value
        int index = 0;                         //stores index of last elelment of output array (modified arr[])
        for(int i=1; i<n; i++ ){             // Traverse all input intervals
            if(arr[index].end >= arr[i].start){                 //if previous interval overlaps with next one merge that one
                arr[index].end = max(arr[index].end, arr[i].end);  //Merging the intervals
                arr[index].start = min(arr[index].start, arr[i].start);
            }
            else{         
                index++;
                arr[index] = arr[i];
            }
        }  
        cout<<"Merged output array";
        for(int i=0; i<=index; i++){
             cout<<"["<<arr[i].start <<", " << arr[i].end<<"]";
        } 

};
int main(){
     Interval arr[] = {{1,3}, {2,4},{5,7}, {6,8}};
     int n= sizeof(arr)/sizeof(arr[0]);
     merge_intervals(arr, n);

}
//-------X--------X---------X--------

//Que 05- Next Permutation
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

/*Algoritm steps:
(i) a[i] < a[i+1]
(ii) a[index 2] > a[index 1]
(iii) swap(a[index 1], a[index 2])
(iv) reverse (index 1 -> last)
*/

void nextPermutation(int arr[], int n){
    int k,l;
    for(k=n-2; k>=0; k--){
        if(arr[k] < arr[k+1]){
            break;
        }
    }
    if(k < 0){
        reverse(arr, arr+n);
    }
    else{
        for(l=n-1; l>k; l--){
            if(arr[l] > arr[k]){
                break;
            }
        }
            swap(arr[k], arr[l]);
            reverse(arr+k+1, arr+n);

        }
    
}
int main(){
    int arr[] = {1,1,5};
    int n =  sizeof(arr)/sizeof(arr[0]);
    nextPermutation(arr, n);
    for(int i=0; i<n; i++){
        cout<<arr[i];
    }
}
//----X-----------X-------X------

// Target complete:)
