//Que 01- count Inversion with brute force, time complexity o(n^2)
#include<iostream>
using namespace std;

int  count_inversion(int arr[], int n){
    int count=0;
    for(int i=0; i<n; i++){
        for(int j= i+1; j<n-1; j++){
        if(arr[i]>arr[j])
        count++;
    }
    }
    return count;
}
int main(){
    int arr[] = {2,3,4,5,6};
    int n = sizeof(arr)/ sizeof(arr[0]);
    cout<< count_inversion(arr, n);
    return 0;
}

// Que 01 with merge sort technique, time complexity o(n log m), spcae complaxity o(n), ** Code from GFG**
#include <bits/stdc++.h>
using namespace std;
 
int _mergeSort(int arr[], int temp[], int left, int right);
int merge(int arr[], int temp[], int left, int mid,
          int right);
 
 
int mergeSort(int arr[], int array_size)
{
    int temp[array_size];
    return _mergeSort(arr, temp, 0, array_size - 1);
}
 
  
int _mergeSort(int arr[], int temp[], int left, int right)
{
    int mid, inv_count = 0;
    if (right > left) {
        mid = (right + left) / 2;
        inv_count += _mergeSort(arr, temp, left, mid);
        inv_count += _mergeSort(arr, temp, mid + 1, right);
        inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}
 

int merge(int arr[], int temp[], int left, int mid,
          int right)
{
    int i, j, k;
    int inv_count = 0;
 
    i = left;        // i is index for left subarray/
    j = mid;         //j is index for right subarray/
    k = left;         // k is index for resultant merged subarray
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }
 
    
    while (i <= mid - 1)
        temp[k++] = arr[i++];
 
    
    while (j <= right)
        temp[k++] = arr[j++];
 
    
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
 
    return inv_count;
}
 
// Driver code
int main()
{
    int arr[] = { 1, 20, 6, 4, 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int ans = mergeSort(arr, n);
    cout << " Number of inversions are " << ans;
    return 0;
}
//------X-------X----------X--------

//Que 2- Best time to buy or sell stock
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
int maximumProfit(int arr[], int n){
    int maxP=0;
    int maxCost=0;
    int minPrice = arr[0];
       for(int i=0; i<n; i++){
           minPrice = min(minPrice, arr[i]);
           maxP= arr[i] - minPrice;
           maxCost = max(maxCost, maxP);
       }
       return maxCost;
}
int main(){
    int arr[] = {100, 180, 260, 310, 40, 535, 695};
    int n = sizeof(arr)/ sizeof(arr[0]);
    cout << maximumProfit(arr, n);
  return 0;
}
//-----X-----X------X----------X

//Que 03- find all pairs on integer array whose sum is equal to the given sum
#include<bits/stdc++.h>
#include<iostream>
using namespace std;

int findPair(int arr[], int n, int sum){
    unordered_map<int, int> m;
 
   
    for (int i = 0; i < n; i++)
        m[arr[i]]++;
 
    int twice_count = 0;
 
    
    for (int i = 0; i < n; i++) {
        twice_count += m[sum - arr[i]];
 
        
        if (sum - arr[i] == arr[i])
            twice_count--;
    }
 
    
    return twice_count / 2;
}
int main(){
    int arr[] = {1, 5, 7, 1};
    int n= sizeof(arr)/ sizeof(arr[0]);
    int k=6;

    cout<< findPair(arr, n, k);
}
//------X-----X------X------

//Que 04- Common elements in three arrays
#include <bits/stdc++.h>
using namespace std;


void findCommon(int ar1[], int ar2[], int ar3[], int n1, int n2, int n3)
{
	
	int i = 0, j = 0, k = 0;

	
	while (i < n1 && j < n2 && k < n3)
	{
		
		if (ar1[i] == ar2[j] && ar2[j] == ar3[k])
		{ cout << ar1[i] << " "; i++; j++; k++; }

		// x < y
		else if (ar1[i] < ar2[j])
			i++;

		// y < z
		else if (ar2[j] < ar3[k])
			j++;

		// We reach here when x > y and z < y, i.e., z is smallest
		else
			k++;
	}
}

// Driver code
int main()
{
	int ar1[] = {1, 5, 10, 20, 40, 80};
	int ar2[] = {6, 7, 20, 80, 100};
	int ar3[] = {3, 4, 15, 20, 30, 70, 80, 120};
	int n1 = sizeof(ar1)/sizeof(ar1[0]);
	int n2 = sizeof(ar2)/sizeof(ar2[0]);
	int n3 = sizeof(ar3)/sizeof(ar3[0]);

	cout << "Common Elements are ";
	findCommon(ar1, ar2, ar3, n1, n2, n3);
	return 0;
}
