class Solution {
    //key point : similart to combination sum2 but in this we dont have duplicates so no need to extra check
public:
    void  helper(int k, int n, int ind, vector<int>&nums, vector<vector<int>>&ans, vector<int>&ds){
        if(ds.size() == k && n==0){
            ans.push_back(ds);
            return;
            
        }
        for(int i=ind; i<nums.size(); i++){
              if(n-nums[i] >= 0){
                  ds.push_back(nums[i]);
                helper(k, n-nums[i], i+1, nums, ans, ds);
                ds.pop_back();
              }
                
                //helper(k, n, ind+1, nums, ans, ds);
            
        }
    }
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int>nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        vector<vector<int>>ans;
        vector<int>ds;
        helper(k, n, 0, nums, ans, ds);
        return ans;
    }
};
