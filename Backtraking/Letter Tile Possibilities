class Solution {
    //key point: similar to permutstion but in this we need each unique permutation rather the fianl leaf output
public:
    void helper(string & s, string & ans, set<string>&result, map<int, int>&flag){
        for(int i=0; i<s.size(); i++){     //at each step check from starting to end
            if(flag[i] == 0){    // if flag value is zero, it means current element is not taken
                ans.push_back(s[i]);  // push the current character in the string
                flag[i] = 1;          //make the flag as 1 for the current character so that next time it can not be picked
                result.insert(ans);  //insert the stored string in the set
                helper(s, ans, result, flag);   // call the same function for the next step
                
                flag[i] = 0;      //after completing the total length of given string for current call, make the flag again 0 
                ans.pop_back();  //and remove the current string so that next string can be pushed
            }
        }
       
    }
    int numTilePossibilities(string tiles) {
        set<string>result;       //to store the result of unique permutation
        map<int, int>flag;       // before inserting the current character first check whether it is taken before or not
        string ans ="";         // to store the current element
         helper(tiles,ans, result, flag);    //call the helper function using backtracking
        
        return result.size();     //finally return the size of set
    }
};
