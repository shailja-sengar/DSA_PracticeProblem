class Solution{
    public:
    
    void helper(int i, int j, int n, vector<vector<int>>&m, vector<string>&ans, vector<vector<int>>&visit, string op, int di[], int dj[]){
        //base case
        if(i==n-1 && j == n-1){
            ans.push_back(op);
            return;
        }
        
        //down
       /* if(i+1 < n && !visit[i+1][j] && m[i+1][j] == 1){
            visit[i][j] = 1;
            helper(i+1, j, n, m, ans, visit, op+'D');
            visit[i][j] = 0;
        }
        
        //left
        if(j-1 >= 0 && !visit[i][j-1] && m[i][j-1] ==1){
            visit[i][j] = 1;
            helper(i, j-1, n, m, ans, visit, op+'L');
            visit[i][j] = 0;
        }
        
        //right
        if(j+1 < n && !visit[i][j+1] && m[i][j+1] == 1){
            visit[i][j] = 1;
            helper(i, j+1, n, m, ans, visit, op+'R');
            visit[i][j] = 0;
        }
        
        //up
        if(i-1 >=0 && !visit[i-1][j] && m[i-1][j] == 1){
            visit[i][j] = 1;
            helper(i-1, j, n, m, ans, visit, op+'U');
            visit[i][j] = 0;
        }*/
        
        //better approach
        string dir = "DLRU";
        for(int ind = 0; ind<4; ind++){
            int nexti = i + di[ind];
            int nextj = j + dj[ind];
            
            if(nexti >=0 && nextj >= 0 && nexti < n && nextj < n && !visit[nexti][nextj] && m[nexti][nextj] == 1){
                visit[i][j] = 1;
                helper(nexti, nextj, n, m, ans, visit, op+dir[ind], di, dj);
                visit[i][j] = 0;
            }
        }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string>ans;
        vector<vector<int>>visit(n, vector<int>(n, 0));
        int di[] = {+1, 0, 0, -1};
        int dj[] = {0, -1, 1, 0};
        if(m[0][0] == 1){
            helper(0, 0, n, m, ans, visit, "", di, dj);
        }
        
        return ans;
    }
};
