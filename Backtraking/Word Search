//using dfs
class Solution {
    
public:
    
    bool dfs(vector<vector<char>>&board, string word, int i, int j, int ind){
        //if current index is equal to word size
        if(ind >= word.size())
            return true;
        
        int n = board.size();
        int m = board[0].size();
        //check the boundary condition of i and j or if the characters are not equal
        if(i<0 || i>=n || j<0 || j>=m || board[i][j] != word[ind])
            return false;
        
        char c = board[i][j];        
        //as we can take one elemnt at a time so mark current element with another letter
        board[i][j] = '#';
        
        //find all it's four neighbour
        
        bool check = dfs(board, word, i-1, j, ind+1)||         //up row
                    dfs(board, word, i+1, j, ind+1) ||          //down row
                    dfs(board, word, i, j-1, ind+1)||           //previous col
                    dfs(board, word, i, j+1, ind+1);             //next col
            
            //backtrack
            board[i][j] = c;
            return check;
    
    }
    bool exist(vector<vector<char>>& board, string word) {
        if(word == " ") return false;
        
        for(int i=0; i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                if(dfs(board, word, i, j, 0) == true)
                    return true;
            }
        }
        return false;
    }
};
