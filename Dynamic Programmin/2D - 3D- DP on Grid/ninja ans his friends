class Solution {
  public:
  
  //recursion
    // int funRec(int row, int col1, int col2, int n, int m, vector<vector<int>>&grid){
    //     //base case
    //     //1.1 boundary conditions
    //     if(col1 < 0 || col1 >= m || col2 < 0 || col2 >= m)
    //         return -1e9;
            
    //     //1.2 reaching at destination
    //     if(row == n-1){
    //         if(col1 == col2)
    //             return grid[row][col1];
    //         else
    //             return grid[row][col1] + grid[row][col2];
    //     }
        
        
    //     //step 2 : try all possible ways
    //     int maxAns = INT_MIN;
        
    //     //for the column we have 3 choice for each robot
    //     for(int di=-1; di<=1; di++){
    //         for(int dj=-1; dj<=1; dj++){
    //             int ans;
    //             if(col1 == col2)
    //                 ans = grid[row][col1] + funRec(row+1, col1+di, col2+dj, n, m, grid);
    //             else
    //                 ans = grid[row][col1] + grid[row][col2] + funRec(row+1, col1+di, col2+dj, n, m, grid);
                
    //             maxAns = max(maxAns, ans);
                    
    //         }
    //     }
        
    //     return maxAns;
    // }
    
//memoization
    // int funMemo(int row, int col1, int col2, int n, int m, vector<vector<int>>&grid, 
    // vector < vector < vector < int >>> & dp){
    //     if(col1<0 || col1>=m || col2<0 || col2>=m)
    //         return -1e9;
            
    //     if(row == n-1){
    //         if(col1 == col2)
    //             return grid[row][col1];
    //         else
    //             return grid[row][col1] + grid[row][col2];
    //     }
        
    //     if(dp[row][col1][col2] != -1)
    //         return dp[row][col1][col2];
            
    //     int maxi = INT_MIN;
        
    //     for(int di=-1; di<=1; di++){
    //         for(int dj=-1; dj<=1; dj++){
    //             int ans;
    //             if(col1 == col2)
    //                 ans = grid[row][col1] + funMemo(row+1, col1+di, col2+dj, n, m, grid, dp);
                    
    //             else
    //                 ans = grid[row][col1] + grid[row][col2] + funMemo(row+1, col1+di, col2+dj, n, m, grid, dp);
                
    //             maxi = max(ans, maxi);
    //         }
    //     }
        
    //     return dp[row][col1][col2] =  maxi;
    // }
    
//Tabulation
    int funTabu(int n, int m, vector<vector<int>>&grid){
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(m, vector<int>(m, 0)));
        
        //base case, fill last row 
        for(int j1=0; j1<m; j1++){
            for(int j2=0; j2<m; j2++){
                if(j1 == j2)
                    dp[n-1][j1][j2] = grid[n-1][j1];
                
                else
                    dp[n-1][j1][j2] = grid[n-1][j1] + grid[n-1][j2];
            }
        }
        
        //row index
        for(int i=n-2; i>=0; i--){
            //column index for robot1
            for(int j1=0; j1<m; j1++){
                //column index for robot2
                for(int j2=0; j2<m; j2++){
                    int maxi = INT_MIN;
                    
                    //for each robot total 3 choice to go
                    for(int di=-1; di<=1; di++){
                        for(int dj=-1; dj<=1; dj++){
                            int ans;
                            if(j1 == j2)
                                ans = grid[i][j1];
                                
                            else
                                ans = grid[i][j1] + grid[i][j2];
                                
                            if((j1+di < 0 || j1+di >= m) || (j2+dj < 0 || j2+dj >= m))
                                ans += -1e9;
                                
                            else
                                ans += dp[i+1][j1+di][j2+dj];
                            
                            maxi = max(maxi, ans);
                        }
                    }
                    
                    dp[i][j1][j2] = maxi;
                }
            }
        }
        
        return dp[0][0][m-1];
    }
    int solve(int n, int m, vector<vector<int>>& grid) {
        //recursion
        //return funRec(0, 0, m-1, n, m, grid);
        
        //memoization
        // vector < vector < vector < int >>> dp(n, vector < vector < int >> (m, vector<int>(m, -1)));
        // return funMemo(0, 0, m-1, n, m, grid, dp);
        
        //tabulation
        return funTabu(n, m, grid);
    }
};
