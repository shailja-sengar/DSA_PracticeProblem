class Solution {
public:
//recursion
    // int funRec(int row, int col, int n, vector<vector<int>>&tri){
    //     //reached at last row
    //     if(row == n-1){
    //         return tri[row][col];
    //     }

    //     int down = tri[row][col] + funRec(row+1, col, n, tri);
    //     int dig = tri[row][col] + funRec(row+1, col+1, n, tri);

    //     return min(down, dig);
    // }

//memoization
    // int funMemo(int row, int col, int n, vector<vector<int>>&tri, vector<vector<int>>&dp){
    //     if(row == n-1)
    //         return tri[row][col];

    //     if(dp[row][col] != -1)
    //         return dp[row][col];
        
    //     int down = tri[row][col] + funMemo(row+1, col, n, tri, dp);
    //     int dig = tri[row][col] + funMemo(row+1, col+1, n, tri, dp);

    //     return dp[row][col] = min(down, dig);
    // }

//Tabulation
    int funTabu(int n, vector<vector<int>>&tri, vector<vector<int>>&dp){
        //base case
        for(int col=0; col<n; col++){
            dp[n-1][col] = tri[n-1][col]; 
        }

        for(int i=n-2; i>=0; i--){
            for(int j=i; j>=0; j--){
                int down = tri[i][j] + dp[i+1][j];
                int dig = tri[i][j] + dp[i+1][j+1];

                dp[i][j] = min(down, dig);
            }
        }
        return dp[0][0];
    }
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
       
        //recursion       
        //return funRec(0, 0, n, triangle);

        //memoization
        // vector<vector<int>>dp(n, vector<int>(n, -1));
        // return funMemo(0, 0, n, triangle, dp);

        //tabulation
        vector<vector<int>>dp(n, vector<int>(n, 0));
        return funTabu(n, triangle, dp);
    }
};
