class Solution {
public:
//recursion
    int funRec(int ind, int n, vector<int>&arr, int k){
        //base case
        if(ind == n)
            return 0;

        int len=0;
        int maxSum = INT_MIN, maxEle = INT_MIN;
        for(int j=ind; j<min(n, ind+k); j++){
            len++;
            maxEle = max(maxEle, arr[j]);
            int sum = (len * maxEle) + funRec(j+1, n, arr, k);
            maxSum = max(maxSum, sum);
        }
        return maxSum;
    }

//memoization
    int funMemo(int ind, int n, vector<int>&arr, int k, vector<int>&dp){
        if(ind == n)
            return 0;
        
        if(dp[ind] != -1)
            return dp[ind];
        
        int len=0;
        int maxSum=INT_MIN, maxEle=INT_MIN;
        for(int j=ind; j<min(n, ind+k); j++){
            len++;
            maxEle = max(maxEle, arr[j]);
            int sum = (len * maxEle) + funMemo(j+1, n, arr, k, dp);
            maxSum = max(maxSum, sum);
        }
        return dp[ind] = maxSum;
    }

//tabulation
    int funTab(vector<int>&arr, int n, int k){
        vector<int>dp(n+1, 0);

        for(int ind=n-1; ind>=0; ind--){
            int len=0;
            int maxSum=INT_MIN, maxEle=INT_MIN;
            for(int j=ind; j<min(n, ind+k); j++){
                len++;
                maxEle = max(maxEle, arr[j]);
                int sum = (len * maxEle) + dp[j+1];
                maxSum = max(maxSum, sum);
            }
            dp[ind] = maxSum;
        }
        return dp[0];
    }
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();

        //recursion
        //return funRec(0, n, arr, k);

        //memoization
        // vector<int>dp(n, -1);
        // return funMemo(0, n, arr, k, dp);

        //tabulation
        return funTab(arr, n, k);
    }
};
