class Solution {
public:
//recursion
    int funRec(int i, int j, vector<int>&nums){
        if(i > j)
            return 0;

        int maxi = -1e9;

        for(int k=i; k<=j; k++){
            int cost = nums[i-1] * nums[k] * nums[j+1] +
                        funRec(i, k-1, nums) + funRec(k+1, j, nums);
            
            maxi = max(maxi, cost);
        }

        return maxi;
    }

//mamoization
    int funMemo(int i, int j, vector<int>&nums, vector<vector<int>>&dp){
        if(i > j)
            return 0;

        if(dp[i][j] != -1)
            return dp[i][j];

        int maxi = -1e9;
        for(int k=i; k<=j; k++){
            int cost = nums[i-1] * nums[k] * nums[j+1] +
                        funMemo(i, k-1, nums, dp) + funMemo(k+1, j, nums, dp);

            maxi = max(maxi, cost);
        }

        return dp[i][j] = maxi;
    }

//tabulation
    int funTab(int n, vector<int>&nums){
        vector<vector<int>>dp(n+2, vector<int>(n+2, 0));

        for(int i=n; i>=1; i--){
            for(int j=i; j<=n; j++){
                int maxi = -1e9;
                for(int k=i; k<=j; k++){
                    int cost = nums[i-1] * nums[k] * nums[j+1] +
                                dp[i][k-1] + dp[k+1][j];

                    maxi = max(maxi, cost);
                }

                dp[i][j] = maxi;
            }
        }

        return dp[1][n];
    }
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(), 1);

        //recursion
        //return funRec(1, n, nums);

        //memoization
        // vector<vector<int>>dp(n+1, vector<int>(n+1, -1));
        // return funMemo(1, n, nums, dp);

        //tabulation
        return funTab(n, nums);
    }
};
