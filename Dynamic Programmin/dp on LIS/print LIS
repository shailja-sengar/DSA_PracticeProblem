class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& arr) {
        //needs to remember approach
        vector<int>dp(n, 1);
        vector<int>hash(n);
        
        int maxi = 1;
        int lastIndex = 0;
        
        for(int i=0; i<n; i++){
            hash[i] = i;
            for(int j=0; j<i; j++){
                if(arr[j] < arr[i] && (1+dp[j] > dp[i])){
                    dp[i] = 1 + dp[j];
                    hash[i] = j;
                }
            }
            
            if(dp[i] > maxi){
                maxi = dp[i];
                lastIndex = i;
            }
        }
        
        vector<int>lis;
        lis.push_back(arr[lastIndex]);
        
        while(hash[lastIndex] != lastIndex){
            lastIndex = hash[lastIndex];
            lis.push_back(arr[lastIndex]);
        }
        
        reverse(lis.begin(), lis.end());
        return lis;
    }
};
