class Solution{
  public:
/*You are required to complete this method*/
//recursion
    // bool isAllStars(string p, int i){
    //     for (int j = 0; j <= i; j++) {
    //         if (p[j] != '*')
    //          return false;
    //     }
    //     return true;
    // }
    bool funRec(int ind1, int ind2, string p, string s){
        if(ind1 < 0 && ind2 < 0) 
            return true;
        if(ind1 < 0 && ind2 >=0)
            return false;
        if(ind2 < 0 && ind1 >= 0)
            return isAllStars(p, ind1);
        
        if(p[ind1] == s[ind2] || p[ind1] == '?')
            return funRec(ind1-1, ind2-1, p, s);
            
        else{
            if(p[ind1] == '*')
                return funRec(ind1-1, ind2, p, s) || funRec(ind1, ind2-1, p, s);
            else
                return false;
        }
    }
    
//memoization
bool funMemo(int ind1, int ind2, string p, string s, vector<vector<bool>>dp){
        if(ind1 < 0 && ind2 < 0) 
            return true;
        if(ind1 < 0 && ind2 >=0)
            return false;
        if(ind2 < 0 && ind1 >= 0)
            return isAllStars(p, ind1);
        
        if(dp[ind1][ind2] != false)
            return dp[ind1][ind2];
            
        if(p[ind1] == s[ind2] || p[ind1] == '?')
            return dp[ind1][ind2] = funMemo(ind1-1, ind2-1, p, s, dp);
            
        else{
            if(p[ind1] == '*')
                return  funMemo(ind1-1, ind2, p, s, dp) || funMemo(ind1, ind2-1, p, s, dp);
            else
                return false;
        }
    }
    
//tabulation
bool isAllStars(string & S1, int i) {

  // S1 is taken in 1-based indexing
  for (int j = 1; j <= i; j++) {
    if (S1[j - 1] != '*')
      return false;
  }
  return true;
}
    bool funTab(int n, int m, string p, string s){
        vector<vector<bool>>dp(n+1, vector<bool>(m+1, false));
        
        //1st base case when both string exahusted
        dp[0][0] = true;
        
        //2nd base case when pattern is exhausted but str is remaing
        for(int j=1; j<=m; j++){
            dp[0][j] = false;
        }
        
        //3rd case when string is exhusted but pattern is remaing if pattern has only '*', then we can assign true
        for(int i=1; i<=n; i++){
            dp[i][0] = isAllStars(p, i);
        }
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(p[i-1] == s[j-1] || p[i-1] == '?')
                    dp[i][j] = dp[i-1][j-1];
                else{
                    if(p[i-1] == '*')
                        dp[i][j] = dp[i-1][j] || dp[i][j-1];
                    else
                        dp[i][j] = false;
                }
                
            }
        }
        
        return dp[n][m];
    }
    int wildCard(string S1,string S2)
    {
        // int n = pattern.size();
        // int m = str.size();
        
        //recursion
        // if(funRec(n-1, m-1, pattern, str))
        //     return 1;
        // return 0;
        
        //memoization
        // vector<vector<bool>>dp(n, vector<bool>(m, false));
        // if(funMemo(n-1, m-1, pattern, str, dp))
        //     return 1;
        // return 0;
        
        //tabulation
        // if(funTab(n, m, pattern, str))
        //     return 1;
        // return 0;
        
        //space optimization
        int n = S1.size();
  int m = S2.size();

  vector < bool > prev(m + 1, false);
  vector < bool > cur(m + 1, false);

  prev[0] = true;

  for (int i = 1; i <= n; i++) {
    cur[0] = isAllStars(S1, i);
    for (int j = 1; j <= m; j++) {

      if (S1[i - 1] == S2[j - 1] || S1[i - 1] == '?')
        cur[j] = prev[j - 1];

      else {
        if (S1[i - 1] == '*')
          cur[j] = prev[j] || cur[j - 1];

        else cur[j] = false;
      }
    }
    prev = cur;
  }

  return prev[m];
    }
};
