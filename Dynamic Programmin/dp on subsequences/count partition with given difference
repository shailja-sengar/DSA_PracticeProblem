class Solution {
  public:
  int mod =(int)1e9+7;
  
 //memoization
    // int funMemo(int ind, int k, vector<int>&arr, vector<vector<int>>&dp){
    //     //base case
    //     if(ind == 0){
    //         if(k==0 && arr[0] == 0)
    //             return 2;
    //         if(k==0 || k == arr[0])
    //                 return 1;
    //         return 0;
    //     }
        
    //     if(dp[ind][k] != -1)
    //         return dp[ind][k];
            
    //     int notPick = funMemo(ind-1, k, arr, dp);
    //     int pick = 0;
    //     if(arr[ind] <= k)
    //         pick = funMemo(ind-1, k-arr[ind], arr, dp);
            
    //     return dp[ind][k] = (notPick + pick)%mod;
    // }
    
//tabulation
    // int funTab(int n, int target, vector<int>&arr){
    //     vector<vector<int>>dp(n, vector<int>(target+1, 0));
        
    //     if(arr[0]==0)
    //         dp[0][0] = 2;
    //     else
    //         dp[0][0] = 1;
            
    //     if(arr[0] != 0 && arr[0] <= target)
    //         dp[0][arr[0]] = 1;
            
    //     for(int ind=1; ind<n; ind++){
    //         for(int k=0; k<=target; k++){
    //             int notPick = dp[ind-1][k];
    //             int pick = 0;
    //             if(arr[ind] <= k)
    //                 pick = dp[ind-1][k - arr[ind]];
                    
    //             dp[ind][k] = (notPick + pick)%mod;
    //         }
    //     }
        
    //     return dp[n-1][target];
    // }
    
    int countPartitions(int n, int d, vector<int>& arr) {
        int totSum = 0;
        for(int i=0; i<n; i++)
            totSum += arr[i];

       int target = (totSum - d)/2;
       
       if((totSum-d) < 0)
            return 0;
            
        if((totSum - d)%2 == 1)
            return 0;
            
        //memoization
        // vector<vector<int>>dp(n, vector<int>(target+1, -1));
        // return funMemo(n-1, target, arr, dp);
        
        //tabulation
        //return funTab(n, target, arr);
        
        //space optimization
        vector<int>prev(target+1, 0);
        
        if(arr[0] == 0)
            prev[0] = 2;
        else
            prev[0] = 1;
            
        if(arr[0] != 0 && arr[0] <= target)
            prev[arr[0]] = 1;
            
        for(int ind=1; ind<n; ind++){
            vector<int>cur(target+1, 0);
            for(int k=0; k<=target; k++){
                int notPick = prev[k];
                int pick = 0;
                if(arr[ind] <= k)
                    pick = prev[k - arr[ind]];
                    
                cur[k] = (notPick + pick)%mod;
            }
            prev = cur;
        }
        
        return prev[target];
    }
};
