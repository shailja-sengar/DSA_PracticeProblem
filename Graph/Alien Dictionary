class Solution{
    private:
    vector<int>topoSort(int V, vector<int>adj[]){
        //Step1: find indegree of each node
        int indegree[V] = {0};
        for(int i=0; i<V; i++){
            for(auto it : adj[i]){
                indegree[it]++;
            }
        }
        
        //Step2: make queue and push all nodes with 0 indegree in the queue
        queue<int>q;
        for(int i=0; i<V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        
        //Step3: apply BFS
        
        vector<int>topo;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            topo.push_back(node);
            
            for(auto it : adj[node]){
                indegree[it]--;
                if(indegree[it] == 0){
                    q.push(it);
                }
            }
        }
        
        return topo;
    }
    public:
    string findOrder(string dict[], int N, int k) {
        vector<int>adj[k];
        for(int i=0; i<N-1; i++){
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(), s2.size());
            for(int p=0; p<len; p++){
                if(s1[p] != s2[p]){
                    adj[s1[p] - 'a'].push_back(s2[p] - 'a');
                break;
                }
                
            }
        }
        
        vector<int>topo = topoSort(k, adj);
        string ans = "";
        
        for(int i=0; i<topo.size(); i++){
            ans = ans + char(topo[i] + 'a');
        }
        
        return ans;
    }
};
