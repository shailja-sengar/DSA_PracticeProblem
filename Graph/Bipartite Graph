class Solution {
    //there might be the case that multiple components will be there
    //so we need to do the same thing for each component starting point
    private:
        bool check(int start, int V, vector<int>adj[], int color[]){
            queue<int>q;
	    
	    q.push(start);
	    color[start] = 0;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        
	        for(auto it : adj[node]){
	            //if current node is not colored yet
	            //color it with oposite with it's adjacent node color
	            if(color[it] == -1){
	                color[it] = !color[node];
	                q.push(it);
	            } 
	            //if it is colored check it is similar to adjacent node color or not if it is return false bcoz
	            //it will not be bipartitie graph
	            else if(color[it] == color[node]){
	                return false;
	            }
	        }
	    }
	    return true;
	    
        }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    // Code here
	    int color[V];
	    for(int i=0; i<V; i++){
	        color[i] = -1;
	    }
	    
	    //to check for each component
	    for(int i=0; i<V; i++){
	        if(color[i] == -1){
	            if(check(i, V, adj, color) == false){
	                return false;
	            }
	        }
	    }
	    return true;
	}

};
