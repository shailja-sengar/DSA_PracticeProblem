class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int k)  {
        // make adjacancy list
        vector<pair<int, int>>adj[n];
        for(auto it : flights){
            adj[it[0]].push_back({it[1], it[2]});
        }
        
        //queue {stops, {node, dis}}
        queue<pair<int, pair<int,int>>>q;
        vector<int>dist(n, 1e9);
        q.push({0, {src, 0}});
        dist[src] = 0;
        //apply dijkstra algo
        while(!q.empty()){
            auto it = q.front();
            int stops = it.first;
            int node = it.second.first;
            int cost = it.second.second;
            q.pop();
            
            
            if(stops > k) continue;
            for(auto it : adj[node]){
                int adjNode = it.first;
                int edC = it.second;
                
                if(cost + edC < dist[adjNode] && stops <= k){
                    dist[adjNode] = cost + edC;
                    q.push({stops+1, {adjNode, cost+edC}});
                }
            }
        }
        
        
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
};
