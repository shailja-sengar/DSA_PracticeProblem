class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	   int n = grid.size();
	   int m = grid[0].size();
	   //visted array
	   vector<vector<int>>vis(n, vector<int>(m, 0));
	   //distance matrix
	   vector<vector<int>>dist(n, vector<int>(m, 0));
	   //queue intialization, in this we store {{row, col},distance}
	   queue<pair<pair<int, int>, int>>q;
	   
	   //first store the already given 1's in distance matrix with distance 0 and mark them in visited array
	   for(int i=0; i<n; i++)
	   {
	       for(int j=0; j<m; j++){
	           if(grid[i][j] == 1){
	               q.push({{i, j}, 0});
	               vis[i][j] = 1;
	           }
	           else{
	               vis[i][j] = 0;
	           }
	       }
	   }
	   
	   int delRow[] = {-1, 0, +1, 0};
	   int delCol[] = {0, +1, 0, -1};
	   
	   //bfs
	   while(!q.empty()){
	       int row = q.front().first.first;
	       int col = q.front().first.second;
	       int steps = q.front().second;
	       q.pop();
	       dist[row][col] = steps;
	       
	       //finding neighbours
	       for(int i=0; i<4; i++){
	           int nRow = row + delRow[i];
	           int nCol = col + delCol[i];
	           if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && vis[nRow][nCol] == 0){
	               vis[nRow][nCol] = 1;
	               q.push({{nRow, nCol}, steps+1});
	           }
	       }
	   }
	   
	   return dist;
	}
};
