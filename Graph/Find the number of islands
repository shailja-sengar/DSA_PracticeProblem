class Solution {
    private:
        void bfs(int row, int col, vector<vector<int>>&vis, vector<vector<char>>&grid){
            vis[row][col] = 1;
            queue<pair<int, int>>q;
            q.push({row, col});
            int n = grid.size();
            int m = grid[0].size();
            
            while(!q.empty()){
                int row = q.front().first;
                int col = q.front().second;
                q.pop();
                
                //to find the neghibours
                for(int deltaRow=-1; deltaRow <= 1; deltaRow++){
                    for(int deltaCol= -1; deltaCol<=1; deltaCol++){
                        int nRow = row + deltaRow;
                        int nCol = col + deltaCol;
                        //neighbours should be valid and inside the grid boundary
                        if(nRow>=0 && nRow < n && nCol >= 0 && nCol < m && 
                        grid[nRow][nCol] == '1' && !vis[nRow][nCol]){
                            vis[nRow][nCol] = 1;
                            q.push({nRow, nCol});
                        }            
                    }
                }
            }
        }
  public:
    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        int count = 0;
        
        //for the starting point go to each element of grid
        for(int row=0; row<n; row++){
            for(int col=0; col<m; col++){
                if(!vis[row][col] && grid[row][col] == '1') {
                    count++;
                    bfs(row, col, vis, grid);
                }
            }
        }
        return count;
    }
};
