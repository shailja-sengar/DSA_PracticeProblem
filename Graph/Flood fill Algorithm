class Solution {
private:
    void dfs(int row, int col, vector<vector<int>>&ans, vector<vector<int>>&image, 
    int iniColor, int newColor, int delRow[], int delCol[]){
        ans[row][col] = newColor;
        int n = ans.size();
        int m = ans[0].size();
        for(int i=0; i<4; i++){
            //to find neighbour row and col
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];
            if(nRow >=0 && nRow <n && nCol>=0 && nCol<m && image[nRow][nCol] == iniColor && ans[nRow][nCol] != newColor){
                dfs(nRow, nCol, ans, image, iniColor, newColor, delRow, delCol);
            }
        }
    }
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        vector<vector<int>>ans = image;
        int iniColor = image[sr][sc];
        //for neighbour row and col
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        dfs(sr, sc, ans, image, iniColor, newColor, delRow, delCol);
        
        return ans;
    }
};
