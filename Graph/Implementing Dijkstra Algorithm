class Solution
{
//method 1: using priority queue
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> minHeap;
        
        //make distance vector with intialization maximum value
        vector<int>dist(V);
        for(int i=0; i<V; i++){
            dist[i] = 1e9;
        }
        
        //assign source node distance as 0
        dist[S] = 0;
        minHeap.push({0, S});
        
        while(!minHeap.empty()){
            //as heap contains a pair of distance and node resp.
            int dis = minHeap.top().first;
            int node = minHeap.top().second;
            minHeap.pop();
            
            //travarse in adjacancy list, this time adjacancy list contain vector of node and distance
            for(auto it : adj[node]){
                int edgeWeight = it[1];
                int adjNode = it[0];
                
                if(dis + edgeWeight < dist[adjNode]){
                    dist[adjNode] = dis + edgeWeight;
                    minHeap.push({dist[adjNode], adjNode});
                }
            }
        }
        
        return dist;
    }
};
