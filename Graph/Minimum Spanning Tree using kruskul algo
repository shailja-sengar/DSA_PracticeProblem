//using kruskual algo, disjoint set

class DisJointSet{
    vector<int>parent, size;
public:
    DisJointSet(int n){
        parent.resize(n+1);
        size.resize(n+1, 1);
        for(int i=0; i<=n; i++){
            parent[i] = i;
        }
    }    
    
    int findP(int node){
        if(node == parent[node]){
            return node;
        }
        
        return parent[node] = findP(parent[node]);
    }
    
    void unionBySize(int u, int v){
        int ulp_u = findP(u);
        int ulp_v = findP(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u]; 
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
       vector<pair<int, pair<int, int>>>edges;
       for(int i=0; i<V; i++){
           for(auto it : adj[i]){
               int adjNode = it[0];
               int wt = it[1];
               int node = i;
               
               edges.push_back({wt, {node, adjNode}});
           }
       }
       
       //sort the edges
       sort(edges.begin(), edges.end());
       int mstWt = 0;
       
       DisJointSet ds(V);
       
       for(auto it : edges){
           int wt = it.first;
           int u = it.second.first;
           int v = it.second.second;
           
           //if parents are different for both the nodes, they belongs to different component so add their
           //add weight and connect/union both the nodes
           if(ds.findP(u) != ds.findP(v)){
               mstWt += wt;
               ds.unionBySize(u, v);
           }
           
       }
       
       return mstWt;
    }
};
