class Solution {
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        queue<pair<int, int>>q;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        //first push all the boundaries ones in queue
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(i == 0 || i == n-1 || j == 0 || j == m-1){
                    if(grid[i][j] == 1){
                        q.push({i, j});
                        vis[i][j] = 1;
                    }
                    else{
                        vis[i][j] = 0;
                    }
                }
            }
        }
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        //apply bfs
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            //traverse in all 4 directions
            for(int i=0; i<4; i++){
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];
                
                //check all the boundary conditition for the neighbour row and col
                if(nRow>=0 && nRow<n && nRow>=0 && nCol<m && vis[nRow][nCol] == 0 && grid[nRow][nCol] == 1){
                    q.push({nRow, nCol});
                    vis[nRow][nCol] = 1;
                }
            }
        }
        
        //in last check if there is remaining ones in grid array that are unvisited
        int count = 0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(vis[i][j] == 0 && grid[i][j] == 1){
                    count++;
                }
            }
        }
        
        return count;
    }
};
