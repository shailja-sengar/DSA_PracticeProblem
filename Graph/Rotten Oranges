class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        //in queue we'll add {{row, col}, time}
        queue<pair<pair<int, int>, int>>q;
        int vis[n][m];
        //first marked the initial rottent oranges in visited array
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2){
                    q.push({{i, j}, 0});
                    vis[i][j] = 2;
                }
                else{
                    vis[i][j] = 0;
                }
            }
        }
        
        int time = 0;
        //for neighbours row and col wise
        int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        //bfs: for making the rotten the oranges simultanously
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            time = max(time, t);
            q.pop();
            //traverse all the 4 neighbours
            for(int i=0; i<4; i++){
                //find the neighbours row and col
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];
                //check the boundaries, and see if current value is already marked in visited or not
                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && vis[nRow][nCol] != 2 && grid[nRow][nCol] == 1){
                    q.push({{nRow, nCol}, t + 1});
                    vis[nRow][nCol] = 2;
                }
            }
        }
        
        //in the last, check if all oranges has rotten or not if not then return -1 else return time
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(vis[i][j] != 2  && grid[i][j] == 1){
                    return -1;
                }
            }
        }
        
        return time;
    }
};
