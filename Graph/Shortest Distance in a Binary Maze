class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        //make adjacancy grid 
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>dist(n, vector<int>(m, 1e9));
        
        //make queue
        queue<pair<int, pair<int, int>>>q;    //{distance, {corordinates x, y}}
        dist[source.first][source.second] = 0;   //as source is given in the pair
        q.push({0, {source.first, source.second}});
        //for moving in 4 direction
       int delRow[] = {-1, 0, +1, 0};
        int delCol[] = {0, +1, 0, -1};
        
        //edge case
        if(source.first == destination.first && source.second == destination.second)
        {
            return 0;
        }
        while(!q.empty()){
            auto it = q.front();
            int dis = it.first;
            int r = it.second.first;
            int c = it.second.second;
            q.pop();
            
            for(int i=0; i<4; i++){
                int newR = r + delRow[i];
                int newC = c + delCol[i];
                
                //check boundary for newRow and newCol
                if(newR>=0 && newR<n && newC>=0 && newC<m && 
                grid[newR][newC]==1 && dis+1 < dist[newR][newC]){
                    dist[newR][newC] = 1 + dis;
                    if(newR == destination.first && newC == destination.second) return 1 + dis;
                    q.push({1+dis, {newR, newC}});
                }
            }
        }
        return -1;
    }
    
    
};
