class Solution {
    private:
        void dfsTopo(int node, vector<pair<int, int>>adj[], int vis[], stack<int>&st){
            //mark as visited
            vis[node] = 1;
            
            for(auto it : adj[node]){
                int v = it.first; //adjacent node
                if(!vis[v]){
                    dfsTopo(v, adj, vis, st);
                }
            }
            
            //push into the stack after all the recusrion call
            st.push(node);
        }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        //make the adjacancy list
        vector<pair<int, int>>adj[N];
        for(int i=0; i<M; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            
            adj[u].push_back({v, wt});
        }
        
        //Step1: apply topo sort using dfs
        int vis[N] = {0};
        stack<int>st;
        for(int i=0; i<N; i++){
            if(!vis[i]){
                dfsTopo(i, adj, vis, st);
            }
        }
        
        //Step2: make distance vector with initialization maximum value
        vector<int>dis(N);
        for(int i=0; i<N; i++){
            dis[i] = 1e9;
        }
        dis[0] = 0;
        //Step3: find the distance for each node
        while(!st.empty()){
            int node = st.top();
            st.pop();
            
            for(auto it : adj[node]){
                int v = it.first;
                int wt = it.second;
                
                //if calculated distance is less than the previous distance
                if(dis[node] + wt < dis[v]){
                    dis[v] = dis[node] + wt;
                }
            }
        }
        
        for(int i=0; i<dis.size(); i++){
            if(dis[i] == 1e9){
                dis[i] = -1;
            }
        }
        return dis;
    }
};
