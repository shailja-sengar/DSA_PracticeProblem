class Solution
{
    private: 
    void dfs(int node, int vis[], stack<int>&st, vector<int>adj[]){
        vis[node] = 1;
        
        //travarse for current nodes' neighbours from adjancy list
        for(auto it : adj[node]){
            if(!vis[it]){
                dfs(it, vis, st, adj);
            }
        }
        
        //when all the calls completed for the current node,  push into the stack
        st.push(node);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int vis[V] = {0};
	    stack<int>st;
	    vector<int>ans;
	    
	    //for each component
	    for(int i=0; i<V; i++){
	        if(!vis[i]){
	            dfs(i, vis, st, adj);
	        }
	    }
	    
	    //when all the nodes will be visited then push all the elements stored in stack in ans array
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	}
};
