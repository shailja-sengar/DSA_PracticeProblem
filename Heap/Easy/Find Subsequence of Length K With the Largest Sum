typedef pair<int, int>ppi;
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        // heap to find k largest element
       priority_queue<ppi, vector<ppi>, greater<ppi>>maxh;
        vector<int>ans;
        for(int i=0; i<nums.size(); i++){
            maxh.push({nums[i], i});
            if(maxh.size() > k){
                maxh.pop();
            }
        }
        
        // heap to find original index so now sort the element based on the index which are stored in previous heap
        
        priority_queue<ppi, vector<ppi>, greater<ppi>>sorth;
        while(!maxh.empty()){
            sorth.push({maxh.top().second, maxh.top().first});
            maxh.pop();
        }
        while(!sorth.empty()){
            ans.push_back(sorth.top().second);
            sorth.pop();
        }
       // reverse(ans.begin(), ans.end());
        return ans;
    }
};
