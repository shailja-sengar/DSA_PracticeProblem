class Solution {
public:
    // key point: we want to store the elements based on their length in lexicographical order like according to diccionary 120 comes first than tha 1204 so we return 120 as larger number
    // we can push elements according to length or else define our own comparetor function
    
    struct  comp{
        bool operator()(string &s1, string &s2){
            if(s1.length() > s2.length()){
                return true;
            }
            
            else if(s1.length() < s2.length()){
                return false;
            }
            
            else{
                for(int i=0; i<s1.length(); i++){
                    if(s1[i] - '0' > s2[i] - '0'){
                        return true;
                    }
                    
                    else if(s1[i]-'0' < s2[i] -'0'){
                        return false;
                    }
                }
                return false;
            }
        }
    };
    string kthLargestNumber(vector<string>& nums, int k) {
       /* priority_queue<pair<int,string>, vector<pair<int,string>>, greater<pair<int, string>>>minh;
        for(auto it : nums){
            int len = it.size();
            minh.push({len, it});
            if(minh.size()>k){
                minh.pop();
            }
        }
        
        return minh.top().second;*/
        
        priority_queue<string, vector<string>, comp>minh;
        
        for(int i=0; i<nums.size(); i++){
            minh.push(nums[i]);
            if(minh.size()>k){
                minh.pop();
            }
        }
        
        return minh.top();
    }
};
