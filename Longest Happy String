class Solution {
public:
    //key point: we will use more charachter from which have more charaers means take 2 otherwise take only 1 character, use max heap to maintain largest number
    //similar to maximum score from removing stones
    string longestDiverseString(int a, int b, int c) {
        priority_queue<pair<int, char>>maxh;
       if (a > 0) maxh.push({a, 'a'});
        if(b>0) maxh.push({b, 'b'});
        if(c>0) maxh.push({c, 'c'});
        
        string ans = "";
        
        while(maxh.size() > 1){
            pair<int, char>num1 = maxh.top(); 
            maxh.pop();
            //int num1 = maxh.top().first;
            //char ch1 = maxh.top().second;
            pair<int, char>num2 = maxh.top();
            maxh.pop();
            //int num2 = maxh.top().first;
            //char ch2 = maxh.top().second;
            
            if(num1.first >= 2){
                ans += num1.second;
                ans += num1.second;
                num1.first -= 2;
            }
            else{
                ans += num1.second;
                num1.first -= 1;
            }
            if(num2.first >= 2 && num2.first >= num1.first){
                ans += num2.second;
                ans += num2.second;
                num2.first -= 2;
            }
            else {
                ans += num2.second;
                num2.first -= 1; 
            }
            
            if(num1.first > 0) maxh.push(num1);
            if(num2.first > 0) maxh.push(num2);
        }
        if(maxh.empty()) return ans;
        
        if((maxh.top().first >= 2) && (ans.back() != maxh.top().second)){
            ans += maxh.top().second;
            ans += maxh.top().second;
        }
        else if((maxh.top().first < 2) && (ans.back() != maxh.top().second)){
            ans += maxh.top().second;
        }
        
        return ans;
    }
};
