Que 01- Longest Common Subsequence // Dynamic programming, Leetcode solution
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n= text2.size();
        int t[m+1][n+1];
        int i,j;
        for( i=0; i<=m; i++) t[i][0] =0;
            for( j=0; j<=n; j++) t[0][j] = 0;
        for(i=1; i<=m; i++){
            for( j=1; j<=n; j++){
                if(text1[i-1] == text2[j-1]){
                    t[i][j] = 1+ t[i-1][j-1];
                }
                else{
                    t[i][j] = max (t[i-1][j], t[i][j-1]);
                }
            }
        }
        return t[m][n];
    }
};
//------------------X------------------X---------------------X-----------------

//Que 02- Longest Repeating Subsequence

#include <iostream>
#include <string>
using namespace std;

// This function mainly returns LCS(str, str)
// with a condition that same characters at
// same index are not considered.
int findLongestRepeatingSubSeq(string str)
{
	int n = str.length();

	// Create and initialize DP table
	int dp[n+1][n+1];
	for (int i=0; i<=n; i++)
		for (int j=0; j<=n; j++)
			dp[i][j] = 0;

	// Fill dp table (similar to LCS loops)
	for (int i=1; i<=n; i++)
	{
		for (int j=1; j<=n; j++)
		{
			// If characters match and indexes are
			// not same
			if (str[i-1] == str[j-1] && i != j)
				dp[i][j] = 1 + dp[i-1][j-1];		
					
			// If characters do not match
			else
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
		}
	}
	return dp[n][n];
}

int main()
{
	string str = "aabb";
	cout << "The length of the largest subsequence that"
			" repeats itself is : "
		<< findLongestRepeatingSubSeq(str);
	return 0;
}
