//Similar to construct unique binary tree when inorder and preorder given
class Solution {
public:
    
    TreeNode* buildTreeHelp(vector<int>&inorder, int inStart, int inEnd, vector<int>&postorder, int postStart, int postEnd, map<int, int>& inMap){
        if(inStart > inEnd || postStart > postEnd){
            return NULL;
        }
        
        TreeNode* root = new TreeNode(postorder[postEnd]);
        
        int inRoot = inMap[postorder[postEnd]];
        int numsLeft = inRoot - inStart;
        
        root->left = buildTreeHelp(inorder, inStart, inRoot-1,
                                   postorder, postStart, postStart+numsLeft-1, inMap);
        
        root->right = buildTreeHelp(inorder, inRoot+1, inorder.size()-1,
                                   postorder, postStart+numsLeft, postEnd-1, inMap);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int, int>inMap;
        for(int i=0; i<inorder.size(); i++){
            inMap[inorder[i]] = i;
        }
        
        TreeNode* root = buildTreeHelp(inorder, 0, inorder.size()-1, 
                                      postorder, 0, postorder.size()-1, inMap);
        
        return root;
    }
};
