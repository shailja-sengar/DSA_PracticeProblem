class Solution {
public:
    
    TreeNode* buildTreeHelp(vector<int>&preorder, int preStart, int preEnd, vector<int>&inorder, int inStart, int inEnd, map<int, int>&hashmapInorder){
        //base case
        if(preStart > preEnd || inStart > inEnd) return NULL;
        
        TreeNode* root = new TreeNode(preorder[preStart]);
        
        int inRoot = hashmapInorder[root->val];
        int numsLeft = inRoot - inStart;        //index to find all the nodes that are present left hand side from root in inorder vector
        
        root->left = buildTreeHelp(preorder, preStart+1, preStart + numsLeft, 
                                    inorder, inStart, inRoot-1, hashmapInorder);
        
        root->right = buildTreeHelp(preorder, preStart+numsLeft+1, preEnd,
                                   inorder, inRoot+1, inEnd, hashmapInorder);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int, int>hashmapInorder;      
        for(int i=0; i<inorder.size(); i++){
            hashmapInorder[inorder[i]] = i;
        }
        
        TreeNode* root = buildTreeHelp(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1, hashmapInorder);
        
        return root;
    }
};
