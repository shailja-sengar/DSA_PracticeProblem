class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;
        long long ans = 0;
        queue<pair<TreeNode*, int>>q;
        q.push({root, 0});
        
        while(!q.empty()){
            int size = q.size();
            long long miniIndex = q.front().second;     //minimum value would be the leftmost index value of current level
            long long first, last;
            for(int i=0; i<size; i++){
                long long curr_id = q.front().second - miniIndex;
                TreeNode* node = q.front().first;
                q.pop();
                
                if(i==0) first = curr_id;
                if(i == size-1) last = curr_id;
                
                if(node->left != NULL) q.push({node->left, 2*curr_id + 1});
                if(node->right != NULL) q.push({node->right, 2*curr_id + 2});
                
            }
            ans = max(ans, last-first+1);
        }
        return ans;
    }
};
