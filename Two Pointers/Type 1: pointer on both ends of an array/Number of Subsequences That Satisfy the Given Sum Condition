class Solution {
public:
   
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int i=0, j=nums.size()-1;
        int ans = 0;
        int sum = 0;
        int mod = 1e9+7;
        
        //store 2's power from 0 to n-1 to avoid more calculation as at each step need to find the power
        vector<int>twoPower{1};
        
        for(int i=0; i<nums.size(); i++){
            twoPower.push_back((twoPower.back()*2)%mod);
        }
        
        while(i <= j){
            sum = nums[i] + nums[j];
            
            if(sum <= target){
                int remainig = j-i;    //j-i denotes the number of subsequence
                ans = (ans + twoPower[remainig]) % mod;
                i++;
            }
            
            else if(sum > target) j--;
            
            
        }
        
        return ans;
    }
};
