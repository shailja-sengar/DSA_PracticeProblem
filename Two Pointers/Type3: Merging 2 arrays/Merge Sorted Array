class Solution {
public:
     /*taking another array
      int i = 0, j = 0;
        vector<int>helperArray;
        while(i <= (m-1) && j <= (n-1)){
            if(nums1[i] < nums2[j]){
                helperArray.push_back(nums1[i]);
                i++;
            }
            else{
                helperArray.push_back(nums2[j]);
                j++;
            }
        }
        while(i < m && j >= n){
            helperArray.push_back(nums1[i]);
            i++;
        }
        while(i >= m && j < n){
            helperArray.push_back(nums2[j]);
            j++;
        }
        nums1.clear();
        for(int i=0; i<(m + n); i++){
            nums1.push_back(helperArray[i]);
        }*/
    
    //key point: start traversing array from the last
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1, j = n-1, k = m+n-1;
        
        while(i >= 0 && j >= 0){
            if(nums1[i] > nums2[j]){
                nums1[k] = nums1[i];
                k--, i--;
            }
            else{
                nums1[k] = nums2[j];
                k--, j--;
            }
        }
        
        while(i >= 0){
            nums1[k] = nums1[i];
            k--, i--;
        }
        while(j >= 0){
            nums1[k] = nums2[j];
            k--, j--;
        }
       
        
    }
};
