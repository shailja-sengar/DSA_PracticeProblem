//key point: if we make while loop condition as "start <= end" then we need to store the current candidate answer in a variable and move end to mid-1 and start to mid + 1, return that answer variable

//and if we make while loop condition as "start < end" then we return answer as a answer and move end to mid, bcoz for the mid value, if condition is true then that mid will be our one cadidate for the answer therefore we don't want to lose that number, so make "end = mid" only, on the other hand, for the start = mid + 1, bcoz if condition is not true that mid value then that mid value can't be answer so we dont include that and move start to mid + 1, in the last return start, bcoz start will hold the final aswer

class Solution {
public:
    
    //check whether the current speed is valid or not
    int speedCheck(vector<int>&piles, int currSpeed){
        int hoursOfSpeed = 0;
        
        for(int i=0; i<piles.size(); i++){
            int num = piles[i];
            while(num != 0){
                if(num <= currSpeed){
                    hoursOfSpeed++;
                    break;
                }
                else{
                    hoursOfSpeed += num/currSpeed;
                    num = num%currSpeed;
                }
            }
        }
        return hoursOfSpeed;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int start = 1;
        int end = *max_element(piles.begin(), piles.end());
        int ans =0;
        while(start <= end){
            int mid = (start + (end - start)/2);
            
            int val = speedCheck(piles, mid);
            
            if(val <= h) end = mid;    //if for the current mid value taken hours are less than or equal to given hours it means we can decrease the eating speed and use remaining hours
            
            else start = mid + 1;    //else if for the current mid value taken hours is more than the given hrs, it means we need to increase the eating speed so we can come within hrs range
        }
        
        return start;
    }
};
