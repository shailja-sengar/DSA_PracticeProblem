class Solution {
public:
    int findMin(vector<int>& nums) {
        int start = 0, end = nums.size()-1, mid = 0;
        int n = nums.size();
        
        //if array is already sorted
        if(nums[start] <= nums[end]) return nums[start];
        
        while(start <= end){
            mid = (start + (end - start)/2);
            
            //if the mid is last element of 1st part of rotated sorted array
            //and also checking this condition first, bcoz mid+1 will always be present
            //but for mid-1 can't be sure
            if(nums[mid] > nums[mid+1]) return nums[mid +1];              
            
            //if minimum element is the 1st element of 2nd part
            else if(nums[mid] < nums[mid-1]) return nums[mid];
            
            //if the mid is last element of 1st part of rotated sorted array
            else if(nums[mid] > nums[mid+1]) return nums[mid +1];  
            
            //if both the condition is false, then find element in unsorted part
            else if(nums[start] <= nums[mid]) start = mid +1;
            else if(nums[mid] <= nums[end]) end = mid - 1;
            
        }
        return -1;
    }
};
