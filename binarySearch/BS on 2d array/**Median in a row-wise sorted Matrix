class Solution{   
public:
//key point : apply binary search, in two portion

    int countSmallerThanMid(vector<int> &row, int mid){
        int low = 0;
        int high = row.size()-1;
        while(low <= high){
            int md = (low + high) >> 1;
            if(row[md] <= mid){
                low = md + 1;
            }
            else{
                high = md -1;
            }
        }
        
        return low;
    }
    int median(vector<vector<int>> &matrix, int r, int c){
        // code here
        int start = 1;
        int end = 1e9;
        
        while(start <= end){
            int mid = (start + end) >> 1;
            int cnt = 0;
            for(int i=0; i<r; i++){
                cnt += countSmallerThanMid(matrix[i], mid);
            }
            
            if(cnt <= (r * c)/2){
                start = mid + 1;
            }
            else{
                end = mid - 1;
            }
        }
        
        return start;
    }
};
