#include <bits/stdc++.h> 
// int funRec(int i, int j1, int j2, int r, int c, vector<vector<int>>&grid){
//     //base case 1.1 out of bound
//     if(j1<0 || j1>=c || j2<0 || j2>=c){
//         return -1e8;
//     }
//     //base case 1.2 destination
//     //reach the last row
//     if(i== r-1){
//         //if both are at the same cell add only one
//         if(j1 == j2) return grid[i][j1];
//         else return grid[i][j1] + grid[i][j2];
//     }
//     int maxi = -1e8;
//     //body, explore all the paths of alice and bob
//     //loop for alice paths
//     for(int dj1=-1; dj1<=1; dj1++){
//         //loop for bobs path
//         for(int dj2=-1; dj2<=1; dj2++){
//             int value = 0;
//             if(j1==j2) value = grid[i][j1];
//             else value = grid[i][j1] + grid[i][j2];
//             value += funRec(i+1, j1+dj1, j2+dj2, r, c, grid);
//             maxi = max(maxi, value);
//         }
//     }
//     return maxi;
// }

int funMemo(int i, int j1, int j2, int r, int c, vector<vector<int>>&grid, vector<vector<vector<int>>>&dp){
    //base case 1.1 out of bound
    if(j1 < 0 || j2<0 || j1>=c || j2>=c){
        return -1e8;
    }
    //base case 1.2 destination
    if(i==r-1){
        if(j1 == j2) return grid[i][j1];
        else return grid[i][j1] + grid[i][j2];
    }
    
    if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
    int maxi = -1e8;
    for(int dj1=-1; dj1<=1; dj1++){
        for(int dj2=-1; dj2<=1; dj2++){
            int value = 0;
            if(j1==j2) value = grid[i][j1];
            else value = grid[i][j1] + grid[i][j2];
            value += funMemo(i+1, j1+dj1, j2+dj2, r, c, grid, dp);
            maxi = max(maxi, value);
        }
    }
    return dp[i][j1][j2] = maxi;
}
int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    //recursion
    //return funRec(0,0,c-1, r, c, grid);
    
    //memoization
    vector<vector<vector<int>>>dp(r, vector<vector<int>>(c, vector<int>(c, -1)));
    return funMemo(0, 0, c-1, r, c, grid, dp);
}
