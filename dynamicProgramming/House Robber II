//similar to house robber
class Solution {
public:
//using tabulation
    int funTab(vector<int>&nums){
        int n = nums.size();
        vector<int>dp(n+1);
        //base case
        dp[0] = nums[0];

        for(int i=1; i<n; i++){
            int pick = nums[i];
            //index should not be negative
            if(i > 1) pick += dp[i-2];
            int notPick = 0 + dp[i-1];
            dp[i] = max(pick, notPick);
        }

        return *max_element(dp.begin(), dp.end());
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
    vector<int>temp1, temp2;
    
    //if array has only one element
    if(n == 1) return nums[0];
    for(int i=0; i<n; i++){
        if(i != 0) temp1.push_back(nums[i]);
        if(i != n-1) temp2.push_back(nums[i]);
    }
    
    return max(funTab(temp1), funTab(temp2));
    }
};
