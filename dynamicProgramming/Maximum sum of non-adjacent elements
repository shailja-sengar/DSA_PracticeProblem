#include <bits/stdc++.h>
int funRec(int ind, vector<int>&nums){
    if(ind == 0) return nums[ind];
    if(ind < 0) return 0;
    
    int pick = nums[ind] + funRec(ind-2, nums);
    int notPick =  0 + funRec(ind-1, nums);
    
    return max(pick, notPick);
}
int funMemo(int ind, vector<int>&nums, vector<int>&dp){
    if(ind == 0) return nums[ind];
    if(ind < 0 ) return 0;
    
    if(dp[ind] != -1) return dp[ind];
    int pick = nums[ind] + funMemo(ind - 2, nums, dp);
    int notPick = 0 + funMemo(ind - 1, nums, dp);
    
    return dp[ind] = max(pick, notPick);
}

int funTab(vector<int>&nums){
    int n = nums.size();
    vector<int>dp(n+1);
    dp[0] = nums[0];
    for(int i=1; i<n; i++){
       int pick = nums[i];
        if(i > 1) pick += dp[i-2];
        int notPick = 0 + dp[i-1];
        dp[i] = max(pick, notPick);
    }
    return *max_element(dp.begin(), dp.end());
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int ind = nums.size();
    //vector<int>dp(ind+1, -1);
    
    return funTab(nums);
}
