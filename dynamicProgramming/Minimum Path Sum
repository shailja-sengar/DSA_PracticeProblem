class Solution {
public:

    // int funRec(int i, int j, vector<vector<int>>&grid){
    //     if(i==0 && j==0) return grid[0][0];
    //     if(i<0 || j<0) return 1e9;  //returning max value so that path's cost get maximum and further we'll not choose that

    //      int up = grid[i][j] + funRec(i-1, j, grid);
    //      int left = grid[i][j] + funRec(i, j-1, grid);

    //     return min(up, left);
    // }

    int funMemo(int i, int j, vector<vector<int>>&grid, vector<vector<int>>&dp){
        if(i==0 && j==0) return grid[i][j];
        if(i<0 || j<0) return 1e9;

        if(dp[i][j] != -1) return dp[i][j];

        int up = grid[i][j] + funMemo(i-1, j, grid, dp);
        int left = grid[i][j] + funMemo(i, j-1, grid, dp);

        return dp[i][j] = min(up, left);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>dp(m, vector<int>(n, -1));

        //recusrion
        //return funRec(m-1, n-1, grid);

        //mamoization
        return funMemo(m-1, n-1, grid, dp);
    }
};
