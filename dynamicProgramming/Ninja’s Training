// int ninjaRec(int day, int last, vector<vector<int>>&points){
//     //base case
//     if(day == 0){
//         int maxi = 0;
//         //iterate through all the tasks
//         for(int task=0; task<3; task++){
//             //first check current task should not be equal to last task
//             if(task != last){
//                 maxi = max(maxi, points[0][task]);
//             } 
//         }
//         return maxi;
//     }
    
//     int maxi = 0;
//     for(int task=0; task<3; task++){
//         if(task != last){
//             int point = points[day][task] + ninjaRec(day-1, task, points);
//             maxi = max(maxi, point);
//         }
//     }
//     return maxi;
// }

/*int ninjaMemo(int day, int last, vector<vector<int>>&points, vector<vector<int>>&dp){
    if(day == 0){
        int maxi = 0;
        for(int task=0; task<3; task++){
            if(task != last){
                maxi = max(maxi, points[0][task]);
            }
        }
        return maxi;
    }
    if(dp[day][last] != -1) return dp[day][last];
    int maxi = 0;
    for(int task=0; task<3; task++){
        if(task != last){
            int point = points[day][task] + ninjaMemo(day-1, task, points, dp);
            maxi = max(maxi, point);
        }
    }
    return dp[day][last] = maxi;
}*/
int ninjaTraining(int n, vector<vector<int>> &points)
{
    //return ninjaRec(n-1, 3, points);
   // vector<vector<int>>dp(n, vector<int>(4, -1));
    //return ninjaMemo(n-1, 3,points, dp);
    
    //tabulation
    vector<vector<int>>dp(n, vector<int>(4, 0));
    //base case
    dp[0][0] = max(points[0][1], points[0][2]);
    dp[0][1] = max(points[0][0], points[0][2]);
    dp[0][2] = max(points[0][0], points[0][1]);
    dp[0][3] = max(points[0][1], max(points[0][2], points[0][0]));
    
    for(int day=1; day<n; day++){
        for(int last=0; last<4; last++){
            dp[day][last] = 0;
            
            for(int task=0; task<3; task++){
                if(task != last){
                    int point = points[day][task] + dp[day-1][task];
                    dp[day][last] = max(dp[day][last], point);
                }
            }
        }
    }
    return dp[n-1][3];
}
