#include <bits/stdc++.h> 
// int funRec(int ind, int tar, vector<int>&num){
//     //base case
//     if(tar == 0) return 1;
//     if(ind == 0){
//         return (num[0] == tar);
//     }
    
//     int notPick = funRec(ind-1, tar, num);
//     int pick = 0;
//     if(num[ind] <= tar) pick += funRec(ind-1, tar-num[ind], num);
    
//     return pick + notPick;
// }

// int funMemo(int ind, int tar, vector<int>&num, vector<vector<int>>&dp){
//     if(tar == 0) return 1;
//     if(ind == 0){
//         return (num[0] == tar);
//     } 
    
//     if(dp[ind][tar] != -1) return dp[ind][tar];
    
//     int notPick = funMemo(ind-1, tar, num, dp);
//     int pick=0;
//     if(num[ind] <= tar) pick = funMemo(ind-1, tar-num[ind], num, dp);
    
//     return dp[ind][tar] = pick+notPick;
// }

 int funTab(int ind, int tar, vector<int>&num, vector<vector<int>>&dp){
    //if target is 0 for any index store 1
     for(int i=0; i<num.size(); i++){
         dp[i][0] = 1;
     }
     //for index 0, if num[0] is equal to tar
     if(num[0] <= tar) dp[0][num[0]] = 1;
     
     //changing parameter
     //for index
     for(int i=1; i<num.size(); i++){
         //for target
         for(int sum=0; sum<=tar; sum++){
             int notPick = dp[i-1][sum];
             int pick = 0;
             if(num[i] <= sum) pick = dp[i-1][sum-num[i]];
             dp[i][sum] = pick + notPick;
         }
     }
     return dp[ind-1][tar];
}
int findWays(vector<int> &num, int tar)
{      
    int n = num.size();
    //recursion
//     return funRec(n-1, tar, num);
    
    //memoization
//     vector<vector<int>>dp(n, vector<int>(tar+1, -1));
//     return funMemo(n-1, tar, num, dp);
    
    //tabulation
    vector<vector<int>>dp(n, vector<int>(tar+1, 0));
    return funTab(n, tar, num, dp);
    
}
