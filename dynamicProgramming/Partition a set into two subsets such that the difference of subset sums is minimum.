#include <bits/stdc++.h> 
int minSubsetSumDifference(vector<int>& arr, int n)
{
	//first calculate the total sum
    int totSum=0;
    for(int i=0; i<arr.size(); i++) totSum +=arr[i];
    int target = totSum;
    
    //tabulation form, 
    //dp table woule be array's size and totSum+1, dp[n][totSum+1]
    vector<vector<bool>>dp(n, vector<bool>(target+1, false));
    //base case 1.1:if target is 0 fill true
    for(int i=0; i<n; i++) dp[i][0]=true;
    //base case 1.2: for first row and first col
    if(arr[0]<=target) dp[0][arr[0]] = true;
    
    for(int ind=1; ind<n; ind++){
        for(int k=1;k<=target;k++){
            bool notTake = dp[ind-1][k];
            bool take = false;
            if(arr[ind]<=k) take=dp[ind-1][k - arr[ind]];
            dp[ind][k]= take | notTake;
        }
    }
    
    //now we have dp table with all target value with true false
    //find the s1 value, from dp table last row 
    int mini = 1e9;
    for(int s1=0;s1<=totSum/2;s1++){
        if(dp[n-1][s1]==true){
            int s2=totSum-s1;
            mini = min(mini, abs(s2-s1));
        }
    }
    return mini;
}
