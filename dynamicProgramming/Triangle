class Solution {
public:

    // int funRec(int i, int j, int n, vector<vector<int>>&triangle){
    //     //base case
    //     if(i == n-1){
    //         return triangle[i][j];
    //     }

    //     int bottom = triangle[i][j] + funRec(i+1, j, n, triangle);
    //     int diag = triangle[i][j] + funRec(i+1, j+1, n, triangle);

    //     return min(bottom, diag);
    // }

    // int funMemo(int i, int j, int n, vector<vector<int>>&tri, vector<vector<int>>&dp){
    //     if(i == n-1){
    //         return tri[i][j];
    //     }

    //     if(dp[i][j] != -1) return dp[i][j];

    //     int bottom = tri[i][j] + funMemo(i+1, j, n, tri, dp);
    //     int diag = tri[i][j] + funMemo(i+1, j+1, n, tri, dp);

    //     return dp[i][j] = min(bottom, diag);
    // }

    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        int m = triangle[n-1].size();
        //vector<vector<int>>dp(n, vector<int>(m, -1));

        //recursion
        //return funRec(0, 0, n, triangle);

        //memoization
        //return funMemo(0, 0, n, triangle, dp);

        //tabulation
        //base case start from last row and fill the dp's last row
        vector<vector<int>>dp(n, vector<int>(n, 0));
        for(int j=0; j<n; j++){
            dp[n-1][j] = triangle[n-1][j];
        }

        //now fill 2nd last row to first row
        for(int i=n-2; i>=0; i--){
            for(int j=i;j>=0; j--){
                int bottom = triangle[i][j] + dp[i+1][j];
                int diag = triangle[i][j] + dp[i+1][j+1];

                dp[i][j] = min(bottom, diag);
            }
        }
        return dp[0][0];
    }
};
