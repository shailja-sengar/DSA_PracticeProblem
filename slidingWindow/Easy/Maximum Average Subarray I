Que. Link: https://leetcode.com/problems/maximum-average-subarray-i/ 

Sol:

class Solution {
public:
    //key point: question has properties of sliding window as k is given, find the contigous subarray and find maximum average
    double findMaxAverage(vector<int>& nums, int k) {
        double maxAvg = INT_MIN;
        int size = nums.size();
        int i=0, j=0;         // i = starting point of window, j = ending point of window
        
        double sum = 0.0;
        
        while(j < size){
            sum = sum + nums[j];
            
            if((j-i+1) < k){       // when window size is less than given k
                j++;
            }
            
            else if((j-i+1) == k){      //when we hit the window size , do calculation
                
                maxAvg = max(maxAvg, sum);
                sum -= nums[i];
                i++;
                j++;
            }
        }
        
        return maxAvg/k;
    }
};
